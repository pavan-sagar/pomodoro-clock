{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","ticker","console","log","state","timerMin","timerSec","setState","sessionIsRunning","breakLengthMin","sessionLengthMin","timerIsRunning","changeLength","bind","startTimer","pauseTimer","resetTimer","handleInterval","component","direction","this","setInterval","clearInterval","timerStyle","color","className","onClick","style","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47af891d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      breakLengthMin: 5,\n      sessionLengthMin: 25,\n      timerMin: 25,\n      timerSec: 0,\n      timerIsRunning: false,\n      sessionIsRunning: true,\n    };\n\n    this.changeLength = this.changeLength.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.pauseTimer = this.pauseTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n\n    //setInterval reference\n    this.handleInterval = null;\n  }\n\n  //Handle the change in minutes of Break or Session length\n  changeLength(component, direction) {\n    if (component == \"session\") {\n      if (direction == \"up\") {\n        this.setState((state, props) => {\n          return {\n            sessionLengthMin: state.sessionLengthMin + 1,\n            timerMin: state.sessionLengthMin + 1, //The same session length should reflect in timer value of Min.\n            timerSec: 0,\n          };\n        });\n      } else {\n        this.setState((state, props) => {\n          if (state.sessionLengthMin == 1) {\n            //While decreasing, the min should not be less than one.\n            return;\n          }\n          return {\n            sessionLengthMin: state.sessionLengthMin - 1,\n            timerMin: state.sessionLengthMin - 1,\n            timerSec: 0,\n          };\n        });\n      }\n    } else {\n      // If the 'Break Length' arrow is pressed\n      if (direction == \"up\") {\n        this.setState((state, props) => {\n          return { breakLengthMin: state.breakLengthMin + 1 };\n        });\n      } else {\n        this.setState((state, props) => {\n          if (state.breakLengthMin == 1) {\n            //While decreasing, the min should not be less than one.\n            return;\n          }\n          return { breakLengthMin: state.breakLengthMin - 1 };\n        });\n      }\n    }\n  }\n\n  //Do the ticking (reducing the seconds and mins of the timer)\n  ticker = () => {\n    console.log(this.state.timerMin, this.state.timerSec);\n\n    if (this.state.timerMin == 0 && this.state.timerSec == 0) {\n      //Stop the timer at 00:00\n\n      //Once the timer reaches 00:00 , we check if the timer that finished was of 'session'. If so then we set the timer min to the break length min.\n      //If the finished timer was of a break session, then we set the timer min to the session length min for the next iteration\n      this.setState(\n        (state, props) => {\n          return { sessionIsRunning: !state.sessionIsRunning };\n        },\n        () => {\n          if (this.state.sessionIsRunning == false) {\n            //Session is over, now we should set timer to break length min\n\n            this.setState({ timerMin: this.state.breakLengthMin });\n          } else {\n            //Break is over, now start session with timer min as session length min set by user\n            this.setState({ timerMin: this.state.sessionLengthMin });\n          }\n        }\n      ); //We mark it as false when the session timer reaches 00:00\n    }\n\n    this.setState((state, props) => {\n      if (state.timerSec == 0) {\n        //If previous second was 0 then next decrement should bring it to 59.\n        return {\n          timerSec: 59,\n          timerMin: state.timerMin - 1,\n        };\n      }\n      return { timerSec: state.timerSec - 1 };\n    });\n  };\n\n  //Start the timer\n  startTimer() {\n    if (this.state.timerIsRunning) {\n      this.pauseTimer();\n      return; //If the start button is pressed twice, it creates another ticker and so time moves faster than a second. Hence this prevention of multiple clicks on start button is required.\n    }\n    //Make the timer status as running\n    this.setState({ timerIsRunning: true });\n    this.handleInterval = setInterval(this.ticker, 1000);\n  }\n\n  pauseTimer() {\n    //Make the timer status as not running\n    this.setState({ timerIsRunning: false });\n    clearInterval(this.handleInterval);\n  }\n\n  resetTimer() {\n    this.setState({\n      timerMin: 25,\n      timerSec: 0,\n      sessionLengthMin: 25,\n      breakLengthMin: 5,\n      timerIsRunning: false,\n    });\n\n    clearInterval(this.handleInterval);\n  }\n\n  render() {\n    let timerStyle =\n      this.state.timerMin == 0 ? { color: \"red\" } : { color: \"white\" }; //Make time red when last minute is left\n    return (\n      <div className=\"App\">\n        <div className=\"pomodoro-container\">\n          <h1>Pomodoro Clock</h1>\n          <div className=\"break-length-container\">\n            <h2 className=\"break-header\">Break Length</h2>\n            <i\n              className=\"fa fa-arrow-down fa-2x\"\n              onClick={() => {\n                if (this.state.timerIsRunning) {\n                  //If timer is running, dont allow to change session or break length.\n                  return;\n                }\n                this.changeLength(\"break\", \"down\");\n              }}\n            />\n            <p className=\"break-length-minutes\">{this.state.breakLengthMin}</p>\n            <i\n              className=\"fa fa-arrow-up fa-2x\"\n              onClick={() => {\n                if (this.state.timerIsRunning) {\n                  //If timer is running, dont allow to change session or break length\n                  return;\n                }\n                this.changeLength(\"break\", \"up\");\n              }}\n            />\n          </div>\n\n          <div className=\"session-length-container\">\n            <h2 className=\"session-header\">Session Length</h2>\n            <i\n              className=\"fa fa-arrow-down fa-2x\"\n              onClick={() => {\n                //If timer is running, dont allow to change session or break length\n                if (this.state.timerIsRunning) {\n                  return;\n                }\n                this.changeLength(\"session\", \"down\");\n              }}\n            />\n            <p className=\"session-length-minutes\">\n              {this.state.sessionLengthMin}\n            </p>\n            <i\n              className=\"fa fa-arrow-up fa-2x\"\n              onClick={() => {\n                if (this.state.timerIsRunning) {\n                  //If timer is running, dont allow to change session or break length\n                  return;\n                }\n                this.changeLength(\"session\", \"up\");\n              }}\n            />\n          </div>\n\n          <div className=\"session-timer-container\">\n            <h2 className=\"session-timer-header\">Session</h2>\n            <p className=\"session-timer\" style={timerStyle}>\n              {this.state.timerMin < 10 //Add extra '0' in timer min and sec if it is a single digit value\n                ? \"0\" + this.state.timerMin\n                : this.state.timerMin}{\" \"}\n              :{\" \"}\n              {this.state.timerSec < 10\n                ? \"0\" + this.state.timerSec\n                : this.state.timerSec}\n            </p>\n          </div>\n\n          <div className=\"button-bar\">\n            <i className=\"fa fa-play fa-2x\" onClick={this.startTimer} />\n            <i className=\"fa fa-pause fa-2x\" onClick={this.pauseTimer} />\n            <i className=\"fa fa-refresh fa-2x\" onClick={this.resetTimer} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}